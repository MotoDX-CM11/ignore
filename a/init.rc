import /init.recovery.${ro.hardware}.rc

on early-init
    start ueventd
    start healthd

on init
    export PATH /sbin:/system/bin
    export LD_LIBRARY_PATH .:/sbin
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /sdcard

# Mount tmp, we dont have swap, use ramfs which can grow if required
    mkdir /tmp
    mount ramfs ramfs /tmp size=512k relatime
    chmod 0777 /tmp
    chown system shell /tmp


    mkdir /boot
    mkdir /recovery
    mkdir /system
    mkdir /data
    mkdir /cache
    mkdir /datamedia
    mkdir /systemorig
    mount tmpfs tmpfs /tmp

    chown root shell /tmp
    chmod 0775 /tmp

# Configure kernel options
    write /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor performance

    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 22b8
    write /sys/class/android_usb/android0/idProduct 4366
    write /sys/class/android_usb/android0/functions adb
    write /sys/class/android_usb/android0/iManufacturer ${ro.product.manufacturer}
    write /sys/class/android_usb/android0/iProduct ${ro.product.model}
    write /sys/class/android_usb/android0/iSerial ${ro.serialno}


on boot
    exec /sbin/fixboot.sh

    ifup lo
    hostname localhost
    domainname localdomain

    class_start default

service ueventd /sbin/ueventd
    critical

service healthd /sbin/healthd -n
    critical

service recovery /sbin/recovery

service adbd /sbin/strace -ff -F -tt -s 200 /sbin/adbd recovery
    disabled
    socket adbd stream 660 system system

# Always start adbd on userdebug and eng builds
on property:ro.debuggable=1
    write /sys/class/android_usb/android0/enable 1
    start adbd
    setprop service.adb.root 1

# Restart adbd so it can run as root
on property:service.adb.root=1
    write /sys/class/android_usb/android0/enable 0
    restart adbd
    write /sys/class/android_usb/android0/enable 1
